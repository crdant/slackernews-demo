name: cluster

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branch
        required: true
        default: main
        type: string
      namespace:
        description: Registry Namespace
        required: true
        type: string
      slug:
        description: Replicated App Slug
        required: true
        type: string
      version:
        description: Release Version
        required: true
        type: string
      proxy:
        description: Proxy Image Registry
        required: true
        default: proxy.replicated.com
        type: string
      distribution:
        description: Kubernetes distribution to use
        required: true
        default: kind
        type: choice
        options:
          - eks
          - k3s
          - rke2
          - kind
          - aks
          - gke
          - oke
          - openshift
          - embedded-cluster
          - kurl
      cluster-version:
        description: Version of the Kubernetes distribution
        required: true
        default: 1.30
        type: string
      license:
        description: |
          License to use for Embedded Cluster. Note, embedded cluster will fail
          if you don't specify the licesne
        required: false
        type: string
      ttl:
        description: Time to live for the cluster
        default: 1h
        required: false
        type: choice
        options:
          - 1h
          - 2h
          - 4h
          - 6h
          - 8h
          - 12h
          - 24h
          - 48h  

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      web-tags: ${{ steps.web-meta.outputs.tags }}
      web-digest: ${{ steps.build-web.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: slackernews/slackernews.git
          ref: ${{ inputs.branch }}
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for web image
        id: web-meta
        uses: docker/metadata-action@v5
        with:
          tags: |
                type=sha,format=long
                type=schedule
                type=raw,${{ inputs.version }}-build.${{ github.run_number }}
                type=ref,event=branch
                type=ref,event=tag
                type=ref,event=pr
          images: ${{ env.REGISTRY }}/${{ inputs.namespace }}/slackernews-web

      - uses: int128/docker-build-cache-config-action@v1
        id: cache
        with:
          image: ghcr.io/${{ github.repository }}/cache

      - name: Build web image
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: ./slackernews
          tags: ${{ steps.web-meta.outputs.tags }}
          labels: ${{ steps.web-meta.outputs.labels }}
          file: ./deploy/Dockerfile.web
          push: true
          cache-from: ${{ steps.cache.outputs.cache-from }}
          cache-to: ${{ steps.cache.outputs.cache-to }}


  sign:
    runs-on: ubuntu-22.04
    needs:
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      web-signature: ${{ steps.sign-web.outputs.signature }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the web image
        id: sign-web
        run: |
          cosign sign ${{ env.REGISTRY }}/${{ inputs.namespace }}/slackernews-web@${{ needs.build.outputs.web-digest }} --yes
          echo "signature=$(cosign triangulate ${{ env.REGISTRY }}/${{ inputs.namespace }}/slackernews-web@${{ needs.build.outputs.web-digest }})" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-22.04
    needs:
      - sign
    outputs:
      version: ${{ steps.release.outputs.channel-slug }}
      channel-slug: ${{ steps.release.outputs.channel-slug }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: slackernews/slackernews.git
          ref: ${{ inputs.branch }}
          token: ${{ github.token }} 

      - run: make chart

      - name: Define App Version
        id: set-version
        run: echo "version=${{ inputs.version }}-build.${GITHUB_REF_NAME//[^a-zA-Z0-9]/}.${GITHUB_RUN_ID}${GITHUB_RUN_ATTEMPT}" >> $GITHUB_OUTPUTS

      - name: Define Channel Name
        id: set-channel
        run: echo "name=${{ github.ref_name }}-${GITHUB_RUN_ID}${GITHUB_RUN_ATTEMPT}" >> $GITHUB_OUTPUTS

      - uses: azure/setup-helm@v3
        with:
          version: "3.9.0"
        id: install

      - name: Update the values.yaml with the registry name
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: 'chart/slackernews/values.yaml'
          find: '$REGISTRY'
          replace: '${{ inputs.proxy }}'
          regex: false

      - name: Update the values.yaml with the image path
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: 'chart/slackernews/values.yaml'
          find: '$IMAGE'
          replace: 'proxy/${{ inputs.slug }}/${{ env.REGISTRY }}/${{ inputs.namespace }}/slackernews-web:${{ step.set-version.outputs.version }}'
          regex: false

      - id: package-helm-chart
        run: |
          cd chart/slackernews && \
          helm dep up --debug && \
          cd .. && \
          helm package \
            --app-version=${{ inputs.version }}-build.${{ github.run_number }} \
            --version=${{ inputs.version }}-build.${{ github.run_number }} \
            ./slackernews


      - name: Copy the helm chart to the kots directory
        run: cp ./chart/slackernews-${{ step.set-version.outputs.version }}.tgz ./kots

      - name: Adds embedded cluster config
        run: |
          cat <<MANIFEST > ./kots/embedded-cluster.yaml
          apiVersion: embeddedcluster.replicated.com/v1beta1
          kind: Config
          spec:
            version: ${RELEASE}
            unsupportedOverrides:
              k0s: |
                config:
                  spec:
                    api:
                      extraArgs:
                        service-node-port-range: 80-32767
                    network:
                      calico:
                        wireguard: true
          MANIFEST
        env:
          RELEASE: ${{ steps.embedded-cluster-version.outputs.release }}

      - name: Set web image in HelmChart kind
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: 'kots/slackernews-chart.yaml'
          find: '$REGISTRY'
          replace: '${{ inputs.proxy }}'
          regex: false

      - name: Update chart version in HelmChart kind
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: 'kots/slackernews-chart.yaml'
          find: '$VERSION'
          replace: '${{ step.set-version.outputs.version }}'
          regex: false

      - name: Update chart version in HelmChart kind
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: 'kots/slackernews-chart.yaml'
          find: '$NAMESPACE'
          replace: '${{ inputs.namespace }}'
          regex: false

      - name: Add web image signature to airgap bundle
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq -i '.spec.additionalImages += [ "${{ needs.sign.outputs.web-signature }}" ]' kots/replicated-app.yaml

      - name: Create the unstable release
        id: create-release
        uses: replicatedhq/create-release@v1.16.2
        with:
          app-slug: ${{ inputs.slug }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          yaml-dir: ./kots
          promote-channel: ${{ step.set-channel.outputs.name }}
          version: ${{ step.set-version.outputs.version }}

  deploy:
    runs-on: ubuntu-22.04
    needs:
      - release
    steps:
      - name: Define Channel Name
        run: echo "CLUSTER_NAME=${{ github.ref_name }}-${GITHUB_RUN_ID}${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV

      - name: Create Customer 
        id: create-customer
        uses: replicatedhq/replicated-actions/create-customer@v1
        with:
          app-slug: ${{ secrets.REPLICATED_APP }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-name: ${{ github.ref_name }}-${{ inputs.distribution }}-${{ inputs.cluster-version }}
          channel-slug: ${{ needs.release.outputs.channel-slug }}
          customer-email: ${{ github.ref_name }}@example.com
          expires-in: 14

      - name: Create Cluster
        id: create-cluster
        uses: replicatedhq/replicated-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          kubernetes-distribution: ${{ inputs.distribution }}
          kubernetes-version: ${{ inputs.version }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          tags: |
            - key: action
              value: ${{ github.action }}
            - key: run
              value: ${{ github.run_id }}
            - key: attempt
              value: ${{ github.run_attempt }}
            - key: ref
              value: ${{ github.ref_name }}
            - key: actor
              value: ${{ github.actor }}
            - key: event
              value: ${{ github.event }}
          timeout-minutes: 2
          ttl: 10m

      - name: Deploy the app
        uses: replicatedhq/replicated-actions/helm-install@v1
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          helm-path: "helm"
          registry-username: ${{ github.ref_name }}@example.com
          registry-password: ${{ steps.create-customer.outputs.license-id }}
          chart: oci://registry.replicated.com/${{ secrets.REPLICATED_APP }}/${{ needs.push-to-replicated.outputs.channel-slug }}/relmatrix-app
          name: ${{ env.RELEASE_NAME }}
          version: ${{ needs.release.outputs.version }}
          namespace: ${{ env.RELEASE_NAME }}
          values: |

      - name: Remove Cluster
        id: remove-cluster
        uses: replicatedhq/replicated-actions/remove-cluster@v1
        continue-on-error: true # It could be that the cluster is already removed
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

      - name: Archive Customer
        id: archive-customer
        if: always()
        uses: replicatedhq/replicated-actions/archive-customer@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-id:  ${{ steps.create-customer.outputs.customer-id }}
